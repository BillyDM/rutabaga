#!/usr/bin/env python

from __future__ import print_function

####
# some blocks of text
####

copyright = """\
/**
 * rutabaga: an OpenGL widget toolkit
 * Copyright (c) 2013 William Light.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

"""

css2c_prelude = """\
/*
 * this file was generated by css2c.py and you probably don't
 * want to edit it by hand.
 */

#pragma once
#include "rutabaga/style.h"

"""

bin2h_prelude = """\
/**
 * this is an autogenerated file.
 * you probably don't want to edit this.
 */

#include <stdint.h>

"""

####
# meat and potatoes
####

from rutabaga_css import RutabagaStylesheet
from waflib.Configure import conf
from waflib.Task import Task

def do_css2c(task, css):
    task.outputs[0].write(copyright + css2c_prelude + css.c_repr())

####
# bin2c
####

def bin2c(binary, line_wrap=79, line_start=''):
    from math import floor

    hexesc = "0x{0:02X}"
    bytes_per_line = floor(line_wrap / len(hexesc.format(0) + ", "))

    # from http://stackoverflow.com/questions/760753#760857
    def batch_gen(data, batch_size):
        for i in range(0, len(data), batch_size):
            yield data[i:i+batch_size]

    return ",\n".join([
        line_start + ", ".join([hexesc.format(byte) for byte in line])
            for line in batch_gen(binary, bytes_per_line)])

def bin2c_task(task, variable_name):
    from os.path import splitext

    binary = task.inputs[0].read(flags="rb")

    matches_extension = lambda ext: lambda i: splitext(i.name)[1] == ext
    output_file = lambda ext:\
        next(filter(matches_extension(ext), task.outputs))

    header = output_file(".h")
    data_file = output_file(".c")

    data_file.write(
        copyright + bin2h_prelude
        + '#include "{0}"\n\n'.format(header.relpath())
        + "const uint8_t {0}[{1}] = {{\n".format(variable_name, len(binary))
        + bin2c(binary, line_wrap=71, line_start='\t')
        + "\n};")

    header.write(
        copyright + bin2h_prelude
        + "extern const uint8_t {0}[{1}];".format(variable_name, len(binary)))

def bin2c_rule(bld, src, var):
    bld(
        rule=lambda task: bin2c_task(task, var),
        variable_name=var,
        source=[src],
        target=[src + ".h", src + ".c"],
        export_includes=".",
        update_outputs=True)

####
# css loader
####

@conf
def rtb_style(bld, style_name):
    """Parses a CSS file and generates build rules for embedding assets."""

    css_path = "{0}/style.css".format(style_name)
    css_node = bld.path.find_resource(css_path)

    css = RutabagaStylesheet(css_node)
    css.parse()

    asset_stlib_sources = []

    for asset in css.embedded_assets:
        path  = "{0}/{1}".format(style_name, asset.path)
        bin2c_rule(bld, path, asset.variable_name)
        asset.header_path = "styles/{0}.h".format(path)

        asset_stlib_sources.append(path + ".c")

    for asset in css.external_assets:
        # transform external asset paths into absolute paths
        path = "{0}/{1}".format(style_name, asset.path)
        node = bld.path.find_resource(path)
        asset.path = node.abspath()

    bld.stlib(
        source=asset_stlib_sources,
        includes="..",
        target="assets")

    bld(
        rule=lambda task: do_css2c(task, css),
        source=css_path,
        target="{0}/style.h".format(style_name),
        use="assets",
        name="styles",
        export_includes=".",
        update_outputs=True)

def build(bld):
    bld.rtb_style("default")
