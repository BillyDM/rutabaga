#!/usr/bin/env python

#
# this file is basically a super-basic gyp runtime
# i.e. it reads gyp build rules and converts them to waf rules
#
# released as cc0/public domain code, do whatever with it.
#
# hold on to your butts.
#

from __future__ import print_function
import os

top = '..'

def parse_gyp_file(path):
    parsed = None
    with open(path) as f:
        # just going to assume that libuv's gyp is well-formed
        parsed = eval(f.read())

    return parsed

def find_target(tgts, name):
    r = [t for t in tgts if t['target_name'] == name]

    if len(r) == 1:
        return r[0]
    elif not r:
        return None
    else:
        return r

def unpack_defs(into, defs):
    for d in defs:
        if d not in into:
            into[d] = []

        if isinstance(defs[d], list):
            into[d].extend(defs[d])
        elif isinstance(defs[d], dict):
            unpack_defs(into, defs[d])

def eval_condition_list(clist, **kwargs):
    ret = {}

    for c in clist:
        cond = None

        try:
            cond = eval(c[0], kwargs)
        except NameError:
            cond = False

        if cond is True:
            defs = c[1]
        else:
            try:
                defs = c[2]
            except IndexError:
                continue

        unpack_defs(ret, defs)

    return ret

def eval_condition_list_recursively(clist, **kwargs):
    ret = {}

    while True:
        defs = eval_condition_list(clist, **kwargs)

        for d in defs:
            if d not in ret:
                ret[d] = []

            ret[d].extend(defs[d])

        if 'conditions' in defs:
            clist = defs['conditions']
        else:
            break

    return ret

def gimme_da_gyp_shit(ctx):
    n = ctx.path.get_src().find_resource('libuv/uv.gyp')
    gyp = parse_gyp_file(n.abspath())

    t = find_target(gyp['targets'], 'libuv')

    from_gyp = {
        'sources':   t['sources'],
        'defines':   [],
        'cflags':    [],
        'ldflags':   [],
        'libraries': []}

    for clist in (gyp['target_defaults']['conditions'], t['conditions'],
            t['direct_dependent_settings']['conditions']):
        r = eval_condition_list_recursively(clist,
                OS=ctx.env.DEST_OS,
                library='static_library')

        [from_gyp[x].extend(r.get(x, [])) for x in from_gyp.keys()]

    from_gyp['sources'] = ['libuv/' + s for s in from_gyp['sources']
            if os.path.splitext(s)[1] in ('.c', '.cc', '.cpp')]

    # libraries from gyp all start with -l
    from_gyp['libraries'] = [l[2:] for l in from_gyp['libraries']]

    return from_gyp

def build(bld):
    from_gyp = gimme_da_gyp_shit(bld)

    # i dont care i dont fucking care anymore
    bld.env.append_unique('LINKFLAGS_LIBUV', from_gyp['ldflags'])

    bld.stlib(
        source=from_gyp['sources'],
        includes=['libuv/include', 'libuv/src'],
        export_includes='libuv/include',
        defines=from_gyp['defines'],

        cflags=from_gyp['cflags'],
        linkflags=from_gyp['ldflags'],
        lib=from_gyp['libraries'],

        target='uv',
        name='libuv')
